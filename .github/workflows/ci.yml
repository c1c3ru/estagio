name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # An√°lise de c√≥digo e testes
  analyze:
    name: Code Analysis & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: dart analyze --fatal-infos
      
    - name: Run unit tests
      run: flutter test --coverage
      
    - name: Run integration tests
      run: flutter test integration_test/
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: true

  # Build Android
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup Android signing
      if: github.event_name == 'release'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
        echo "storeFile=keystore.jks" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
        echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        
    - name: Build APK (Debug)
      if: github.event_name != 'release'
      run: flutter build apk --debug
      
    - name: Build APK (Release)
      if: github.event_name == 'release'
      run: flutter build apk --release
      
    - name: Build App Bundle (Release)
      if: github.event_name == 'release'
      run: flutter build appbundle --release
      
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-*.apk
        
    - name: Upload App Bundle artifact
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: android-aab
        path: build/app/outputs/bundle/release/app-release.aab

  # Build iOS
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS certificates
      if: github.event_name == 'release'
      env:
        IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        # Configurar certificados iOS
        echo "$IOS_CERTIFICATE" | base64 --decode > certificate.p12
        echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
        
        # Instalar certificado
        security create-keychain -p "" build.keychain
        security import certificate.p12 -t agg -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -A
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        
        # Instalar provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Build iOS (Debug)
      if: github.event_name != 'release'
      run: |
        flutter build ios --debug --no-codesign
        
    - name: Build iOS (Release)
      if: github.event_name == 'release'
      run: |
        flutter build ios --release
        
    - name: Build IPA
      if: github.event_name == 'release'
      run: |
        cd build/ios/iphoneos
        mkdir Payload
        cp -r Runner.app Payload/
        zip -r app.ipa Payload/
        
    - name: Upload IPA artifact
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: build/ios/iphoneos/app.ipa

  # Build Web
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: analyze
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Web
      run: flutter build web --release
      
    - name: Upload Web artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: build/web/

  # Deploy para Firebase Hosting (Web)
  deploy-web:
    name: Deploy Web to Firebase
    runs-on: ubuntu-latest
    needs: build-web
    if: github.event_name == 'release'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Web artifact
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: build/web/
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: firebase deploy --only hosting --token "$FIREBASE_TOKEN"

  # Deploy Android para Google Play
  deploy-android:
    name: Deploy Android to Play Store
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'release'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download App Bundle
      uses: actions/download-artifact@v3
      with:
        name: android-aab
        path: ./
        
    - name: Setup Google Play credentials
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      run: echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" > service-account.json
      
    - name: Deploy to Google Play (Internal Testing)
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: service-account.json
        packageName: com.example.estagio
        releaseFiles: app-release.aab
        track: internal
        status: completed

  # Deploy iOS para TestFlight
  deploy-ios:
    name: Deploy iOS to TestFlight
    runs-on: macos-latest
    needs: build-ios
    if: github.event_name == 'release'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download IPA
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa
        path: ./
        
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file app.ipa \
          --apiKey "$APP_STORE_CONNECT_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"

  # Notifica√ß√µes
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-android, deploy-ios]
    if: always() && github.event_name == 'release'
    
    steps:
    - name: Notify Slack
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Deploy realizado com sucesso para todas as plataformas!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Falha no deploy. Verifique os logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
