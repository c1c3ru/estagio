import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart' hide AuthException;
import '../../../core/enums/user_role.dart';
import '../../../core/errors/app_exceptions.dart';
import '../../../domain/repositories/i_auth_datasource.dart';

class AuthDatasource implements IAuthDatasource {
  final SupabaseClient _supabaseClient;

  AuthDatasource(this._supabaseClient);

  @override
  Stream<Map<String, dynamic>?> getAuthStateChanges() => _supabaseClient
      .auth.onAuthStateChange
      .where((event) => 
          event.event == AuthChangeEvent.signedIn || 
          event.event == AuthChangeEvent.signedOut ||
          event.event == AuthChangeEvent.tokenRefreshed)
      .map((event) {
        final session = event.session;
        if (session == null) return null;
        return {
          'id': session.user.id,
          'email': session.user.email,
          'role': session.user.userMetadata?['role'] ?? 'student',
          'fullName': session.user.userMetadata?['full_name'],
          'phoneNumber': session.user.phone,
          'profilePictureUrl': session.user.userMetadata?['avatar_url'],
          'createdAt': DateTime.parse(session.user.createdAt).toIso8601String(),
          'updatedAt': session.user.updatedAt != null
              ? DateTime.parse(session.user.updatedAt!).toIso8601String()
              : null,
        };
      })
      .distinct();

  @override
  Future<Map<String, dynamic>> signUpWithEmailAndPassword({
    required String email,
    required String password,
    required String fullName,
    required UserRole role,
    String? registration,
    bool? isMandatoryInternship,
    String? supervisorId,
    String? course,
    String? advisorName,
    String? department,
    String? classShift,
    String? internshipShift,
    String? birthDate,
    String? contractStartDate,
    String? contractEndDate,
  }) async {
    try {
      final response = await _supabaseClient.auth.signUp(
        email: email,
        password: password,
        data: {
          'full_name': fullName,
          'role': role.toString(),
          if (registration != null) 'registration': registration,
          if (course != null) 'course': course,
          if (advisorName != null) 'advisor_name': advisorName,
          if (department != null) 'department': department,
        },
      );

      if (response.user == null) {
        throw AuthException('Erro ao registrar usu√°rio');
      }

      // Remover cria√ß√£o de perfil aqui! O perfil ser√° criado ap√≥s login/valida√ß√£o de e-mail
      // await _supabaseClient.from('students' ou 'supervisors').insert(...)

      return {
        'id': response.user!.id,
        'email': response.user!.email,
        'role': role.toString(),
        'fullName': fullName,
        'registration': registration,
        'emailConfirmed': response.user!.emailConfirmedAt != null,
        'createdAt': DateTime.parse(response.user!.createdAt).toIso8601String(),
        'updatedAt': response.user!.updatedAt != null
            ? DateTime.parse(response.user!.updatedAt!).toIso8601String()
            : null,
      };
    } catch (e) {
      throw AuthException('Erro ao registrar usu√°rio: $e');
    }
  }

  @override
  Future<Map<String, dynamic>> signInWithEmailAndPassword(
    String email,
    String password,
  ) async {
    try {
      if (kDebugMode) {
        print('üîê Tentando fazer login com email: $email');
      }

      // Tentar login
      if (kDebugMode) {
        print('üîë Fazendo login...');
      }
      final response = await _supabaseClient.auth.signInWithPassword(
        email: email,
        password: password,
      );

      if (kDebugMode) {
        print('‚úÖ Login bem-sucedido para usu√°rio: ${response.user?.id}');
      }

      if (response.user == null) {
        throw AuthException('Erro ao fazer login: usu√°rio n√£o retornado');
      }

      // Verificar se o usu√°rio tem dados na tabela correspondente
      if (kDebugMode) {
        print('üîç Verificando dados do usu√°rio na tabela...');
      }
      await _ensureUserDataExists(response.user!);
      if (kDebugMode) {
        print('‚úÖ Dados do usu√°rio verificados/criados com sucesso');
      }

      return {
        'id': response.user!.id,
        'email': response.user!.email,
        'role': response.user!.userMetadata?['role'] ?? 'student',
        'fullName': response.user!.userMetadata?['full_name'],
        'phoneNumber': response.user!.phone,
        'profilePictureUrl': response.user!.userMetadata?['avatar_url'],
        'emailConfirmed': response.user!.emailConfirmedAt != null,
        'createdAt': DateTime.parse(response.user!.createdAt).toIso8601String(),
        'updatedAt': response.user!.updatedAt != null
            ? DateTime.parse(response.user!.updatedAt!).toIso8601String()
            : null,
      };
    } on AuthException catch (e) {
      if (e.toString().contains('email_not_confirmed')) {
        throw AuthException(
            'E-mail n√£o confirmado. Verifique sua caixa de entrada e confirme o cadastro antes de fazer login.');
      }
      rethrow;
    } catch (e) {
      if (e.toString().contains('email_not_confirmed')) {
        throw AuthException(
            'E-mail n√£o confirmado. Verifique sua caixa de entrada e confirme o cadastro antes de fazer login.');
      }
      if (kDebugMode) {
        print('‚ùå Erro no login: $e');
      }
      if (kDebugMode) {
        print('‚ùå Tipo de erro: ${e.runtimeType}');
      }
      if (kDebugMode) {
        print('‚ùå Mensagem completa: $e');
      }
      if (e.toString().contains('Invalid login credentials') ||
          e.toString().contains('invalid_credentials')) {
        throw AuthException(
            'E-mail ou senha incorretos. Verifique suas credenciais.');
      } else if (e.toString().contains('400')) {
        throw AuthException(
            'Credenciais inv√°lidas. Verifique seu e-mail e senha.');
      } else {
        throw AuthException('Erro ao fazer login: $e');
      }
    }
  }

  @override
  Future<void> signOut() async {
    try {
      await _supabaseClient.auth.signOut();
    } catch (e) {
      throw AuthException('Erro ao fazer logout: $e');
    }
  }

  @override
  Future<Map<String, dynamic>?> getCurrentUser() async {
    try {
      final user = _supabaseClient.auth.currentUser;
      if (user == null) return null;

      // Verificar se o usu√°rio tem dados na tabela correspondente
      await _ensureUserDataExists(user);

      // Buscar dados completos do estudante se dispon√≠veis
      final role = user.userMetadata?['role'] ?? 'student';
      Map<String, dynamic> userData = {
        'id': user.id,
        'email': user.email,
        'role': role,
        'fullName': user.userMetadata?['full_name'],
        'phoneNumber': user.phone,
        'profilePictureUrl': user.userMetadata?['avatar_url'],
        'createdAt': DateTime.parse(user.createdAt).toIso8601String(),
        'updatedAt': user.updatedAt != null
            ? DateTime.parse(user.updatedAt!).toIso8601String()
            : null,
      };

      // Se for estudante, buscar dados completos da tabela students
      if (role == 'student') {
        try {
          final studentData = await _supabaseClient
              .from('students')
              .select('*')
              .eq('id', user.id)
              .maybeSingle();

          if (studentData != null) {
            // Mesclar dados do auth com dados da tabela students
            userData.addAll({
              'fullName': studentData['full_name'] ?? userData['fullName'],
              'course': studentData['course'],
              'advisorName': studentData['advisor_name'],
              'registrationNumber': studentData['registration_number'],
              'isMandatoryInternship': studentData['is_mandatory_internship'],
              'classShift': studentData['class_shift'],
              'internshipShift1': studentData['internship_shift_1'],
              'internshipShift2': studentData['internship_shift_2'],
              'birthDate': studentData['birth_date'],
              'contractStartDate': studentData['contract_start_date'],
              'contractEndDate': studentData['contract_end_date'],
              'totalHoursRequired': studentData['total_hours_required'],
              'totalHoursCompleted': studentData['total_hours_completed'],
              'weeklyHoursTarget': studentData['weekly_hours_target'],
              'phoneNumber':
                  studentData['phone_number'] ?? userData['phoneNumber'],
              'profilePictureUrl': studentData['profile_picture_url'] ??
                  userData['profilePictureUrl'],
              'status': studentData['status'],
              'supervisorId': studentData['supervisor_id'],
            });
          }
        } catch (e) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Erro ao buscar dados completos do estudante: $e');
          }
        }
      }

      return userData;
    } catch (e) {
      throw AuthException('Erro ao buscar usu√°rio atual: $e');
    }
  }

  /// Verifica se o usu√°rio tem dados na tabela correspondente
  Future<void> _ensureUserDataExists(User user) async {
    try {
      final role = user.userMetadata?['role'] ?? 'student';

      if (kDebugMode) {
        print('üîç Verificando dados para usu√°rio ${user.id} com role: $role');
      }
      
      // Primeiro, garantir que existe na tabela users
      await _ensureUserInUsersTable(user, role);

      if (role == 'student') {
        // Apenas verificar se existe, n√£o criar automaticamente
        final studentResponse = await _supabaseClient
            .from('students')
            .select('id')
            .eq('id', user.id)
            .maybeSingle();

        if (studentResponse == null) {
          if (kDebugMode) {
            print(
                '‚ö†Ô∏è Nenhum dado de estudante encontrado para ${user.id} - usu√°rio precisa completar cadastro');
          }
          // N√£o criar automaticamente - deixar o usu√°rio completar o cadastro
        } else {
          if (kDebugMode) {
            print('‚úÖ Dados de estudante encontrados para ${user.id}');
          }
        }
      } else if (role == 'supervisor') {
        final existingSupervisor = await _supabaseClient
            .from('supervisors')
            .select('id')
            .eq('id', user.id)
            .maybeSingle();

        if (existingSupervisor == null) {
          if (kDebugMode) {
            print('üîß Criando registro de supervisor para ${user.id}');
            print('üìã Dados do usu√°rio: ${user.userMetadata}');
          }
          
          try {
            // Criar registro b√°sico na tabela supervisors
            final insertData = {
              'id': user.id,
              'full_name': user.userMetadata?['full_name'] ?? 'Supervisor',
              'job_code': user.userMetadata?['registration'],
              'department': user.userMetadata?['department'] ?? 'N√£o informado',
            };
            
            if (kDebugMode) {
              print('üìã Dados para inser√ß√£o: $insertData');
              print('üîë User ID: ${user.id}');
              print('üìã User metadata: ${user.userMetadata}');
            }
            
            await _supabaseClient.from('supervisors').insert(insertData);
            
            if (kDebugMode) {
              print('‚úÖ Registro de supervisor criado com sucesso');
            }
          } catch (insertError) {
            if (kDebugMode) {
              print('‚ùå Erro detalhado ao criar supervisor: $insertError');
              print('‚ùå Tipo do erro: ${insertError.runtimeType}');
            }
            // N√£o rethrow para n√£o impedir o login
          }
        } else {
          if (kDebugMode) {
            print('‚úÖ Dados de supervisor encontrados para usu√°rio ${user.id}');
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Erro ao verificar dados do usu√°rio: $e');
      }
      // N√£o rethrow aqui para n√£o impedir o login
      // Apenas loga o erro para debug
    }
  }

  @override
  Future<void> resetPassword(String email) async {
    try {
      await _supabaseClient.auth.resetPasswordForEmail(
        email,
        redirectTo: 'io.supabase.flutter://reset-callback/',
      );
    } catch (e) {
      throw AuthException('Erro ao resetar senha: $e');
    }
  }

  @override
  Future<Map<String, dynamic>> updateProfile({
    required String userId,
    String? fullName,
    String? email,
    String? password,
    String? phoneNumber,
    String? profilePictureUrl,
  }) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      if (user == null) {
        throw AuthException('Usu√°rio n√£o autenticado');
      }

      if (user.id != userId) {
        throw AuthException('N√£o √© poss√≠vel atualizar outro usu√°rio');
      }

      final updates = <String, dynamic>{};

      if (email != null && email.isNotEmpty) {
        await _supabaseClient.auth.updateUser(
          UserAttributes(
            email: email,
          ),
        );
      }

      if (password != null && password.isNotEmpty) {
        await _supabaseClient.auth.updateUser(
          UserAttributes(
            password: password,
          ),
        );
      }

      if (fullName != null && fullName.isNotEmpty) {
        updates['full_name'] = fullName;
      }

      if (phoneNumber != null) {
        updates['phone'] = phoneNumber;
      }

      if (profilePictureUrl != null) {
        updates['avatar_url'] = profilePictureUrl;
      }

      if (updates.isNotEmpty) {
        await _supabaseClient.auth.updateUser(
          UserAttributes(
            data: updates,
          ),
        );
      }

      final updatedUser = await getCurrentUser();
      if (updatedUser == null) {
        throw AuthException('Erro ao atualizar perfil');
      }

      return updatedUser;
    } catch (e) {
      throw AuthException('Erro ao atualizar perfil: $e');
    }
  }

  /// Verifica se um usu√°rio existe no Supabase
  Future<bool> userExists(String email) async {
    try {
      if (kDebugMode) {
        print('üîç Verificando se usu√°rio existe: $email');
      }

      // Como n√£o temos acesso admin, vamos tentar uma abordagem diferente
      // Tentar fazer login e capturar o erro espec√≠fico
      try {
        await _supabaseClient.auth.signInWithPassword(
          email: email,
          password: 'senha_temporaria_para_teste',
        );
      } catch (e) {
        if (e.toString().contains('Invalid login credentials')) {
          if (kDebugMode) {
            print('‚úÖ Usu√°rio $email existe no Supabase (senha incorreta)');
          }
          return true;
        } else if (e.toString().contains('User not found')) {
          if (kDebugMode) {
            print('‚ùå Usu√°rio $email n√£o existe no Supabase');
          }
          return false;
        }
      }

      return true; // Se chegou aqui, o usu√°rio existe
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Erro ao verificar se usu√°rio existe: $e');
      }
      return false;
    }
  }

  /// Testa a conectividade com o Supabase
  Future<bool> testConnection() async {
    try {
      if (kDebugMode) {
        print('üîß Testando conectividade com Supabase...');
      }

      // Tentar fazer uma consulta simples para testar a conex√£o

      if (kDebugMode) {
        print('‚úÖ Conectividade com Supabase OK');
      }
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro na conectividade com Supabase: $e');
      }
      return false;
    }
  }

  /// Testa o registro de um usu√°rio para verificar se a autentica√ß√£o est√° funcionando
  Future<bool> testRegistration() async {
    try {
      if (kDebugMode) {
        print('üß™ Testando registro de usu√°rio...');
      }

      final testEmail =
          'teste_${DateTime.now().millisecondsSinceEpoch}@teste.com';
      const testPassword = 'Teste123!';

      final response = await _supabaseClient.auth.signUp(
        email: testEmail,
        password: testPassword,
      );

      if (response.user != null) {
        if (kDebugMode) {
          print('‚úÖ Registro de teste bem-sucedido');
        }
        // Limpar o usu√°rio de teste
        await _supabaseClient.auth.signOut();
        return true;
      } else {
        if (kDebugMode) {
          print('‚ùå Registro de teste falhou');
        }
        return false;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro no registro de teste: $e');
      }
      return false;
    }
  }

  /// Testa a inser√ß√£o de dados na tabela students
  Future<void> testStudentInsertion(
      String userId, String fullName, String registration) async {
    try {
      if (kDebugMode) {
        print('üß™ Testando inser√ß√£o de dados do estudante...');
      }
      if (kDebugMode) {
        print('üß™ User ID: $userId');
      }
      if (kDebugMode) {
        print('üß™ Full Name: $fullName');
      }
      if (kDebugMode) {
        print('üß™ Registration: $registration');
      }

      final result = await _supabaseClient.from('students').insert({
        'id': userId,
        'full_name': fullName,
        'registration_number': registration,
        'course': 'Curso n√£o definido',
        'advisor_name': 'Orientador n√£o definido',
        'is_mandatory_internship': true,
        'class_shift': 'morning',
        'internship_shift_1': 'morning',
        'birth_date': '2000-01-01',
        'contract_start_date': DateTime.now().toIso8601String().split('T')[0],
        'contract_end_date': DateTime.now()
            .add(const Duration(days: 365))
            .toIso8601String()
            .split('T')[0],
        'total_hours_required': 300.0,
        'total_hours_completed': 0.0,
        'weekly_hours_target': 20.0,
        'created_at': DateTime.now().toIso8601String(),
        'updated_at': DateTime.now().toIso8601String(),
      }).select();

      if (kDebugMode) {
        print('‚úÖ Teste de inser√ß√£o bem-sucedido: $result');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro no teste de inser√ß√£o: $e');
      }
      if (kDebugMode) {
        print('‚ùå Tipo de erro: ${e.runtimeType}');
      }
      rethrow;
    }
  }

  /// Verifica as pol√≠ticas de seguran√ßa da tabela students
  Future<void> checkTablePolicies() async {
    try {
      if (kDebugMode) {
        print('üîí Verificando pol√≠ticas de seguran√ßa...');
      }

      // Tentar fazer uma consulta simples

      if (kDebugMode) {
        print('‚úÖ Consulta √† tabela students bem-sucedida');
      }

      // Verificar se o usu√°rio atual pode inserir
      final currentUser = _supabaseClient.auth.currentUser;
      if (kDebugMode) {
        print('üë§ Usu√°rio atual: ${currentUser?.id}');
      }
      if (kDebugMode) {
        print('üë§ Email: ${currentUser?.email}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao verificar pol√≠ticas: $e');
      }
      if (kDebugMode) {
        print('‚ùå Tipo de erro: ${e.runtimeType}');
      }
    }
  }

  /// Verifica se o usu√°rio pode inserir dados na tabela students
  Future<void> verifyUserInsertionPermission(String userId) async {
    try {
      if (kDebugMode) {
        print('üîç Verificando permiss√£o de inser√ß√£o para usu√°rio: $userId');
      }

      // Verificar se o usu√°rio est√° autenticado
      final currentUser = _supabaseClient.auth.currentUser;
      if (currentUser == null) {
        if (kDebugMode) {
          print('‚ùå Usu√°rio n√£o est√° autenticado');
        }
        return;
      }

      if (kDebugMode) {
        print('‚úÖ Usu√°rio autenticado: ${currentUser.id}');
      }

      // Tentar inserir um registro de teste
      final testData = {
        'id': userId,
        'full_name': 'Teste',
        'registration_number': 'TEST123',
        'course': 'Teste',
        'advisor_name': 'Teste',
        'is_mandatory_internship': true,
        'class_shift': 'morning',
        'internship_shift_1': 'morning',
        'birth_date': '2000-01-01',
        'contract_start_date': DateTime.now().toIso8601String().split('T')[0],
        'contract_end_date': DateTime.now()
            .add(const Duration(days: 365))
            .toIso8601String()
            .split('T')[0],
        'total_hours_required': 300.0,
        'total_hours_completed': 0.0,
        'weekly_hours_target': 20.0,
        'created_at': DateTime.now().toIso8601String(),
        'updated_at': DateTime.now().toIso8601String(),
      };

      final result =
          await _supabaseClient.from('students').insert(testData).select();
      if (kDebugMode) {
        print('‚úÖ Permiss√£o de inser√ß√£o verificada: $result');
      }

      // Remover o registro de teste
      await _supabaseClient.from('students').delete().eq('id', userId);
      if (kDebugMode) {
        print('üßπ Registro de teste removido');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao verificar permiss√£o de inser√ß√£o: $e');
      }
      if (kDebugMode) {
        print('‚ùå Tipo de erro: ${e.runtimeType}');
      }
    }
  }

  /// Verifica se h√° pol√≠ticas de RLS ativas na tabela students
  Future<void> checkRLSPolicies() async {
    try {
      if (kDebugMode) {
        print('üîí Verificando pol√≠ticas de RLS...');
      }

      // Tentar fazer uma consulta sem autentica√ß√£o
      final result =
          await _supabaseClient.from('students').select('*').limit(1);

      if (kDebugMode) {
        print('‚úÖ Consulta sem autentica√ß√£o bem-sucedida');
      }
      if (kDebugMode) {
        print('üìä Resultado: $result');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao verificar RLS: $e');
      }
      if (kDebugMode) {
        print('‚ùå Tipo de erro: ${e.runtimeType}');
      }

      if (e.toString().contains('permission denied') ||
          e.toString().contains('new row violates row-level security policy')) {
        if (kDebugMode) {
          print(
              'üö® Problema detectado: Pol√≠ticas de RLS est√£o bloqueando a opera√ß√£o');
        }
        if (kDebugMode) {
          print(
              'üí° Solu√ß√£o: Verificar as pol√≠ticas de seguran√ßa no painel do Supabase');
        }
      }
    }
  }
  
  /// Garante que o usu√°rio existe na tabela public.users
  Future<void> _ensureUserInUsersTable(User user, String role) async {
    try {
      final existingUser = await _supabaseClient
          .from('users')
          .select('id, role')
          .eq('id', user.id)
          .maybeSingle();
          
      if (existingUser == null) {
        if (kDebugMode) {
          print('üîß Criando usu√°rio na tabela users');
        }
        
        final userData = {
          'id': user.id,
          'email': user.email,
          'role': role,
          'matricula': user.userMetadata?['registration'],
        };
        
        if (kDebugMode) {
          print('üìã Dados do usu√°rio: $userData');
        }
        
        await _supabaseClient.from('users').insert(userData);
        
        if (kDebugMode) {
          print('‚úÖ Usu√°rio criado na tabela users');
        }
      } else {
        // Verificar se o role est√° correto
        final currentRole = existingUser['role'] as String?;
        if (currentRole != role) {
          if (kDebugMode) {
            print('üîÑ Atualizando role de $currentRole para $role');
          }
          
          await _supabaseClient
              .from('users')
              .update({'role': role})
              .eq('id', user.id);
              
          if (kDebugMode) {
            print('‚úÖ Role atualizado na tabela users');
          }
        } else {
          if (kDebugMode) {
            print('‚úÖ Usu√°rio j√° existe na tabela users com role correto');
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao criar/atualizar usu√°rio na tabela users: $e');
      }
    }
  }
}
